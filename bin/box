#!/bin/bash

## ATTENTION ##
# This script is designed to be invoked via an alias:
#
#    $ alias box="source /path/to/box/script"
#
# Invoking in this manner allows us to change the caller's current
# directory and environment. Very handy things... however this means
# we need to be careful with the callers environment. We need to be
# sure that if we change directory or set environment variables that
# we don't clobber caller state in unintended ways. Be sure therefore
# to restore the current working directory (unless intending to
# actually change it and be sure to use the "local" qualifier on
# variable declarations in funtions.

# For the above reasons, we can use set -x no matter how much we would
# like to. (It will call the calling context to exit.)

function box_git {
    local d=$1
    shift
    git --git-dir="$d"/.git --work-tree="$d" "$@"
}

function box_find_project {
    local prj=$1
    local r
    local p
    local found
    local alts
    for r in ~/.voom-repos/*; do
        for p in $(box_git "$r" ls-files project.clj \*\*/project.clj); do
            if box_git "$r" show HEAD:"$p" |egrep -q "^\(defproject +($prj|$prj/$prj) "; then
                found=$(box_git "$r" show HEAD:"$p" |egrep -o "^\(defproject .*${prj}.*" |awk '{print $2}')
                break 2
            elif box_git "$r" show HEAD:"$p" |egrep -q "^\(defproject .*$prj.*"; then
                local s=$(box_git "$r" show HEAD:"$p" |egrep -o "^\(defproject .*${prj}.*" |awk '{print $2}')
                alts="${alts}\n$prj may be $s in $(basename $r) .. $p"
            fi
        done
    done
    if [ -n "$found" ]; then
        echo "Found $found in $r ..  $p"
    elif [ -n "$alts" ]; then
        echo -e "$alts"
    else
        echo "Couldn't find $prj"
    fi
}

box_find_project "$@"
